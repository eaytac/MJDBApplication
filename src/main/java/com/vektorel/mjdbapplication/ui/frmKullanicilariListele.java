/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vektorel.mjdbapplication.ui;

import com.vektorel.mjdbapplication.data.Kullanici;
import com.vektorel.mjdbapplication.data.VeritabaniIslemleri;
import com.vektorel.mjdbapplication.sql.KullaniciSql;
import com.vektorel.mjdbapplication.sql.OgrenciSql;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Emre
 */
public class frmKullanicilariListele extends javax.swing.JFrame {

    Kullanici kullanici;
    frmAnaSayfa anaSayfa;
    /**
     * Creates new form frmKullanicilariListele
     */
    public frmKullanicilariListele(Kullanici kullanici) {
        initComponents();
        setLocationRelativeTo(null);
        anaSayfa = new frmAnaSayfa(kullanici);
        this.kullanici = kullanici;
        lblAktifKullanici.setText("Aktif Kullanıcı: " + kullanici.getAdSoyad());
        tabloyuDoldur();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblKullaniciListesi = new javax.swing.JTable();
        lblAktifKullanici = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuKullaniciIslemleri = new javax.swing.JMenu();
        mnuKullaniciEkle = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        mnuKullaniciSil = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuAnaSayfayaDon = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblKullaniciListesi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblKullaniciListesi);

        lblAktifKullanici.setText("Aktif Kullanıcı: ");

        mnuKullaniciIslemleri.setText("Kullanıcı İşlemleri");

        mnuKullaniciEkle.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnuKullaniciEkle.setText("Yeni Kullanıcı Ekle");
        mnuKullaniciEkle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuKullaniciEkleActionPerformed(evt);
            }
        });
        mnuKullaniciIslemleri.add(mnuKullaniciEkle);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem1.setText("Kullanıcı Bilgilerini Güncelle");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        mnuKullaniciIslemleri.add(jMenuItem1);

        mnuKullaniciSil.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        mnuKullaniciSil.setText("Kullanıcı Sil");
        mnuKullaniciSil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuKullaniciSilActionPerformed(evt);
            }
        });
        mnuKullaniciIslemleri.add(mnuKullaniciSil);
        mnuKullaniciIslemleri.add(jSeparator1);

        mnuAnaSayfayaDon.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        mnuAnaSayfayaDon.setText("Ana Sayfaya Dön");
        mnuAnaSayfayaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAnaSayfayaDonActionPerformed(evt);
            }
        });
        mnuKullaniciIslemleri.add(mnuAnaSayfayaDon);

        jMenuBar1.add(mnuKullaniciIslemleri);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblAktifKullanici)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAktifKullanici))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuKullaniciEkleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuKullaniciEkleActionPerformed
        kullaniciEkle();
    }//GEN-LAST:event_mnuKullaniciEkleActionPerformed

    private void mnuAnaSayfayaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAnaSayfayaDonActionPerformed
        anaSayfayaDon();
    }//GEN-LAST:event_mnuAnaSayfayaDonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        kullaniciGuncelle();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void mnuKullaniciSilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuKullaniciSilActionPerformed
        kullaniciSil();
    }//GEN-LAST:event_mnuKullaniciSilActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblAktifKullanici;
    private javax.swing.JMenuItem mnuAnaSayfayaDon;
    private javax.swing.JMenuItem mnuKullaniciEkle;
    private javax.swing.JMenu mnuKullaniciIslemleri;
    private javax.swing.JMenuItem mnuKullaniciSil;
    private javax.swing.JTable tblKullaniciListesi;
    // End of variables declaration//GEN-END:variables

    protected void tabloyuDoldur() {
        KullaniciSql kullaniciSql = new KullaniciSql();
        List<Kullanici> kullanicilar = kullaniciSql.getir();
        String[][] liste = new String[kullanicilar.size()][4];
        
        for (int i=0; i<kullanicilar.size(); i++) {
            liste[i][0] = kullanicilar.get(i).getId().toString();
            liste[i][1] = kullanicilar.get(i).getKullaniciAdi().toString();
            liste[i][2] = "";
            liste[i][3] = kullanicilar.get(i).getAdSoyad().toString();
        }
        
        tblKullaniciListesi.setModel(new javax.swing.table.DefaultTableModel(
            liste,
            new String [] {
                "No", "Kullanıcı Adı", "Şifre", "Adı Soyadı"
            }
        ));
    }

    private void kullaniciEkle() {
        
        frmKullaniciEkleGuncelle ekleGuncelle = new frmKullaniciEkleGuncelle(kullanici);
        ekleGuncelle.setVisible(true);
        this.setVisible(false);
    }
    
    private void kullaniciGuncelle(){
        
        VeritabaniIslemleri veritabaniIslemleri = new VeritabaniIslemleri();
        
        String guncellenecekKullaniciNo = JOptionPane.showInputDialog(rootPane, "Lütfen güncellemek istediğiniz kullanıcıya ait No bilgisini giriniz", "Kullanıcı Güncelle", JOptionPane.QUESTION_MESSAGE);
        
        String query = "select kullanici_adi from kullanici where id=" + guncellenecekKullaniciNo;
        
        try {
            ResultSet resultSet = veritabaniIslemleri.kayitGetir(query);
            
            if (!resultSet.next()) {
                JOptionPane.showMessageDialog(rootPane, "Kayıt getirilirken bir hata oluştu! Lütfen girdiğiniz No bilgisini kontrol ediniz!", "Hata!!!", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        frmKullaniciEkleGuncelle ekleGuncelle = new frmKullaniciEkleGuncelle(kullanici, guncellenecekKullaniciNo);
        ekleGuncelle.setVisible(true);
        this.setVisible(false);
    }

    private void anaSayfayaDon() {
        int secim = JOptionPane.showConfirmDialog(rootPane, "Ana sayfaya dönmek istiyor musunuz?", "Çıkış", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (secim == 0) {
            anaSayfa.setVisible(true);
            this.setVisible(false);
        }
    }

    private void kullaniciSil() {
        VeritabaniIslemleri veritabaniIslemleri = new VeritabaniIslemleri();
        
        String silinecekKullaniciNo = JOptionPane.showInputDialog(rootPane, "Lütfen silmek istediğiniz kullanıcıya ait No bilgisini giriniz", "Kullanıcı Sil", JOptionPane.QUESTION_MESSAGE);
        
        String query = "select ad_soyad from kullanici where id=" + silinecekKullaniciNo;
        
        String kullaniciAdSoyad = null;
        try {
            ResultSet resultSet = veritabaniIslemleri.kayitGetir(query);
            
            if (resultSet.next()) {
                kullaniciAdSoyad = resultSet.getString("ad_soyad");
            }
            else {
                JOptionPane.showMessageDialog(rootPane, "Kayıt getirilirken bir hata oluştu! Lütfen girdiğiniz No bilgisini kontrol ediniz!", "Hata!!!", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        int secim = JOptionPane.showConfirmDialog(rootPane, silinecekKullaniciNo + " No'lu, " + kullaniciAdSoyad + " adlı kullanıcıyı silmek istiyor musunuz?", "Dikkat", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (secim == 0) {
            
            KullaniciSql kullaniciSql = new KullaniciSql();
            boolean silmeSonuc = kullaniciSql.sil(Long.parseLong(silinecekKullaniciNo));

            if (silmeSonuc)
                JOptionPane.showMessageDialog(rootPane, "Kayıt silindi", "İşlem Tamam", JOptionPane.INFORMATION_MESSAGE);
            else
                JOptionPane.showMessageDialog(rootPane, "Kayıt silinirken bir hata oluştu!", "Hata!!!", JOptionPane.ERROR_MESSAGE);
            
            tabloyuDoldur();
        }
    }
    
}
